from django.db import models

class Cell(dict):
 def __init__(self):
  self["color"] = ' ' # space = free, 1 = color 1, 0 = color 0
  self["value"] = 0
  self["risk"] = 0
  self["nbFlips"]=0
  self["nbPositionsOffered"]=0
  self["motion"] = False # animation for flip of tiles
  self["playable"] = False
  self["position"]='00'

class Player(dict):
 def __init__(self):
  self["pile"] = [] # represents possible moves, in prefered order
  self["human"] = True
  self["color"] = 0

class Board(list):
 def __init__(self):
  for i in range(8):
   self.append([])
   for j in range(8):
    c1=Cell()
    c1["position"]=str(i)+str(j)
    self[i].append(c1)
  self[3][3]["color"] = self[4][4]["color"] = 1
  self[3][4]["color"] = self[4][3]["color"] = 0

  self[2][3]["value"] =self[3][2]["value"] =self[2][4]["value"] =self[4][2]["value"] =self[3][5]["value"] =self[5][3]["value"] =self[4][5]["value"] =self[5][4]["value"] = 1
  self[1][3]["value"] =self[3][1]["value"] =self[1][4]["value"] =self[4][1]["value"] =self[3][6]["value"] =self[6][3]["value"] =self[4][6]["value"] =self[6][4]["value"] = -2
  self[1][2]["value"] =self[2][1]["value"] =self[1][5]["value"] =self[5][1]["value"] =self[2][6]["value"] =self[6][2]["value"] =self[5][6]["value"] =self[6][5]["value"] = -3
  self[0][1]["value"] =self[1][0]["value"] =self[6][7]["value"] =self[7][6]["value"] =self[0][6]["value"] =self[6][0]["value"] =self[7][1]["value"] =self[1][7]["value"] = -4
  self[0][2]["value"] =self[2][0]["value"] =self[5][7]["value"] =self[7][5]["value"] =self[0][5]["value"] =self[5][0]["value"] =self[7][2]["value"] =self[2][7]["value"] = 4
  self[0][3]["value"] =self[3][0]["value"] =self[4][7]["value"] =self[7][4]["value"] =self[0][4]["value"] =self[4][0]["value"] =self[7][3]["value"] =self[3][7]["value"] = 2
  self[0][0]["value"] =self[7][0]["value"] =self[0][7]["value"] =self[7][7]["value"] = 5
  self[1][1]["value"] =self[6][1]["value"] =self[1][6]["value"] =self[6][6]["value"] = -5
  self[1][1]["risk"] =self[6][1]["risk"] =self[1][6]["risk"] =self[6][6]["risk"] = -1
  self[0][0]["risk"] =self[7][0]["risk"] =self[0][7]["risk"] =self[7][7]["risk"] = 3
  self[2][2]["value"] =self[5][2]["value"] =self[2][5]["value"] =self[5][5]["value"] = 3

class BorderPattern(list):
 def __init__(self):
  self+=[[3, 'o', 3], [3, 'x', 3], [3, 'o', 'x', 3], [3, 'o', 1, -1], [3, 'x', -2, 3], [3, 'o', 'x', 'o', 3], [3, 'o', 'x', 4, 3], [3, 'o', 0 , -2, 3], [3, 'o', -2, 'x', 3], [3, 'o', 2, 'o', 3], [3, 'x', 'o', 'x', 3], [3, 'x', 'o', -2, 3], [3, 'x', 0 , 0 , 3], [3, 'x', 2, 'x', 3], [3, -2, 'x', -2, 3], [3, 0 , 'o', 0 , 3], [3, 'o', 'x', 'o', 'x', 3], [3, 'o', 'x', 'o', -2, 3], [3, 'o', 'x', 4, -2, 3], [3, 'o', 'x', -2 , 'x', 3], [3, 'o', 'x', 4 , 'o', 3], [3, 'o', 0 , -2 , -1 , 3], [3, 'o', 0 , 2 , 'x', 3], [3, 'o', -2 , -2 , 'o', 3], [3, 'o', -2 , 'x', -2 , 3], [3, 'o', -2 , 'o', 'x', 3], [3, 'o', 1 , 'o', -2 , 3], [3, 'x', 'o', 'x', -2 , 3], [3, 'x', 'o', 0 , 1 , 3], [3, 'x', 'o', 1 , 'x', 3], [3, 'x', 1 , 0 , -2 , 3], [3, 'x', 0 , 0 , 'x', 3], [3, 'x', 2 , 'x', -2 , 3], [3, 'x', 0 , 'o', 0 , 3], [3, 0 , 0 , 'x', -2 , 3], [3, -2 , 0 , 'o', 0 , 3], [3, 1 , 'x', 'o', -2 , 3], [3, 'o', 'x', 'o', 'x', 'o', 3], [3, 'o', 'x', 'o', 'x', -2 , 3], [3, 'o', 'x', 'o', 0 , -2 , 3], [3, 'o', 'x', 'o', 1 , 'x', 3], [3, 'o', 'x', 'o', -2 , 'o', 3], [3, 'o', 'x', 4 , -2 , 0 , 3], [3, 'o', 'x', 4 , -1 , 'x', 3], [3, 'o', 'x', 4 , 0 , 'o', 3], [3, 'o', 'x', 4 , 'x', 'o', 3], [3, 'o', 'x', -2 , 'x', -2 , 3], [3, 'o', 'x', -2 , 'o', 'x', 3], [3, 'o', 'x', 4 , 'o', -1 , 3], [3, 'o', 0 , -2 , 0 , -1 , 3], [3, 'o', 1 , 0 , 0 , 'x', 3], [3, 'o', 0 , -2 , 0 , 'o', 3], [3, 'o', 0 , 0 , 'x', -1 , 3], [3, 'o', 1 , 1 , 'o', 'x', 3], [3, 'o', -2 , -2 , 'o', -1 , 3], [3, 'o', -2 , 'x', 'o', 'x', 3], [3, 'o', 2 , 'x', 'o', -2 , 3], [3, 'o', -2 , 'x', -1 , -1 , 3], [3, 'o', -2 , 'x', 2 , 'x', 3], [3, 'o', -2 , 'x', -2 , 'o', 3], [3, 'o', -2 , 'o', 'x', -1 , 3], [3, 'o', 1 , 'o', -1 , -1 , 3], [3, 'o', 1 , 'o', 2 , 'x', 3], [3, 'o', -1 , 'o', -1 , 'o', 3], [3, 'x', 'o', 'x', 'o', 'x', 3], [3, 'x', 'o', 'x', 'o', -2 , 3], [3, 'x', 'o', 'x', 0 , -2 , 3], [3, 'x', 'o', 'x', 2 , 'x', 3], [3, 'x', 'o', 0 , 1 , -1 , 3], [3, 'x', 'o', 0 , 0 , 'x', 3], [3, 'x', 'o', 2 , 'x', -2 , 3], [3, 'x', 'o', 2 , 'o', 'x', 3], [3, 'x', 'o', 1 , 'o', 1 , 3], [3, 'x', 0 , 0 , 0 , -1 , 3], [3, 'x', 0 , 1 , 0 , 'x', 3], [3, 'x', 0 , 0 , 'x', -2 , 3], [3, 'x', 2 , 0 , 'o', -1 , 3], [3, 'x', 0 , 'x', 'o', -2 , 3], [3, 'x', 2 , 'x', 1 , -1 , 3], [3, 'x', 2 , 'x', 2 , 'x', 3], [3, 'x', 2 , 'o', 'x', 0 , 3], [3, 'x', 0 , 'o', 0 , -1 , 3], [3, 'x', 0 , 'o', 0 , 'x', 3], [3, 0 , 0 , 0 , 'x', -2 , 3], [3, -1 , 0 , 0 , 'o', 0 , 3], [3, 1 , 1 , 'x', 'o', -2 , 3], [3, 0 , 0 , 'x', 0 , 0 , 3], [3, 0 , 0 , 'o', 'x', 0 , 3], [3, 0 , 0 , 'o', 0 , 0 , 3], [3, -2 , 'x', 'o', 'x', -2 , 3], [3, -2 , 'x', 1 , 'x', -2 , 3], [3, -2 , 'x', 0 , 'o', 0 , 3], [3, -2 , 'o', 'x', 'o', -2 , 3], [3, -1 , 'o', 2 , 'o', -1 , 3], [3, 'o', 'x', 'o', 'x', 'o', 'x', 3], [3, 'o', 'x', 'o', 'x', 'o', -2 , 3], [3, 'o', 'x', 'o', 'x', 0 , -2 , 3], [3, 'o', 'x', 'o', 'x', 2 , 'x', 3], [3, 'o', 'x', 'o', 'x', -2 , 'o', 3], [3, 'o', 'x', 'o', 0 , 1 , -2 , 3], [3, 'o', 'x', 'o', 0 , 1 , 'x', 3], [3, 'o', 'x', 'o', 0 , -1 , 'o', 3], [3, 'o', 'x', 'o', -1 , 'x', 'o', 3], [3, 'o', 'x', 'o', 0 , 'x', -2 , 3], [3, 'o', 'x', 'o', 2 , 'o', 'x', 3], [3, 'o', 'x', 'o', 0 , 'o', 0 , 3], [3, 'o', 'x', 4 , -2 , 0 , -1 , 3], [3, 'o', 'x', 4 , -2 , 1 , 'x', 3], [3, 'o', 'x', 4 , -2 , 0 , 'o', 3], [3, 'o', 'x', 4 , 4 , 'x', 'o', 3], [3, 'o', 'x', 4 , 0 , 'x', -2 , 3], [3, 'o', 'x', 4 , 0 , 'o', 'x', 3], [3, 'o', 'x', 4 , -1 , 'o', 0 , 3], [3, 'o', 'x', -1 , 'x', 'o', 'x', 3], [3, 'o', 'x', 4 , 'x', 'o', -2 , 3], [3, 'o', 'x', -1 , 'x', 0 , -2 , 3], [3, 'o', 'x', -1 , 'x', 2 , 'x', 3], [3, 'o', 'x', -1 , 'x', -2 , 'o', 3], [3, 'o', 'x', -1 , 'o', 'x', -2 , 3], [3, 'o', 'x', 4 , 'o', -1 , -1 , 3], [3, 'o', 'x', 4 , 'o', -1 , 'x', 3], [3, 'o', 'x', 4 , 'o', 1 , 'o', 3], [3, 'o', 0 , -1 , 0 , 0 , -1 , 3], [3, 'o', 0 , -1 , 0 , 0 , 'x', 3], [3, 'o', 0 , -1 , -1 , 0 , 'o', 3], [3, 'o', 0 , -1 , 0 , 'x', -2 , 3], [3, 'o', 0 , -1 , 1 , 'o', 'x', 3], [3, 'o', 0 , -1 , 0 , 'o', 0 , 3], [3, 'o', 2 , 0 , 'x', 'o', 'x', 3], [3, 'o', 2 , -2 , 'x', 'o', -2 , 3], [3, 'o', 2 , 0 , 'x', 0 , -1 , 3], [3, 'o', 2 , 0 , 'x', 2 , 'x', 3], [3, 'o', 2 , 0 , 'x', -2 , 'o', 3], [3, 'o', 0 , 0 , 'o', 'x', 0 , 3], [3, 'o', -1 , -1 , 'o', 0 , -2 , 3], [3, 'o', -1 , -1 , 'o', 0 , 'x', 3], [3, 'o', -1 , -1 , 'o', 1 , 'o', 3], [3, 'o', -2 , 'x', 'o', 'x', -2 , 3], [3, 'o', 1 , 'x', 'o', 0 , -1 , 3], [3, 'o', -2 , 'x', 'o', 2 , 'x', 3], [3, 'o', 2 , 'x', 'o', 0 , 'o', 3], [3, 'o', -2 , 'x', 0 , 0 , -1 , 3], [3, 'o', -2 , 'x', 0 , 0 , 'x', 3], [3, 'o', -2 , 'x', 1 , 'x', -2 , 3], [3, 'o', -2 , 'x', 2 , 'o', 'x', 3], [3, 'o', -2 , 'x', 0 , 'o', 0 , 3], [3, 'o', -2 , 'o', 'x', 'o', 'x', 3], [3, 'o', -2 , 'o', 'x', 'o', -2 , 3], [3, 'o', -2 , 'o', 'x', -1 , -1 , 3], [3, 'o', -2 , 'o', 'x', 0 , 'x', 3], [3, 'o', 2 , 'o', 0 , 0 , -2 , 3], [3, 'o', 2 , 'o', 0 , 2 , 'x', 3], [3, 'o', 2 , 'o', 0 , 'x', -2 , 3], [3, 'o', 2 , 'o', 0 , 'o', 'x', 3], [3, 'o', 2 , 'o', 0 , 'o', -1 , 3], [3, 'x', 'o', 'x', 'o', 'x', -2 , 3], [3, 'x', 'o', 'x', 'o', 0 , -2 , 3], [3, 'x', 'o', 'x', 'o', 2 , 'x', 3], [3, 'x', 'o', 'x', 0 , 0 , -1 , 3], [3, 'x', 'o', 'x', 0 , 0 , 'x', 3], [3, 'x', 'o', 'x', 2 , 'x', -2 , 3], [3, 'x', 'o', 'x', 2 , 'o', 'x', 3], [3, 'x', 'o', 'x', 0 , 'o', -2 , 3], [3, 'x', 'o', 0 , 0 , 0 , 0 , 3], [3, 'x', 'o', 0 , 0 , 0 , 'x', 3], [3, 'x', 'o', 0 , 0 , 'x', -2 , 3], [3, 'x', 'o', 0 , 0 , 'o', 'x', 3], [3, 'x', 'o', 0 , 0 , 'o', 0 , 3], [3, 'x', 'o', 0 , 'x', 'o', -2 , 3], [3, 'x', 'o', 2 , 'x', 0 , 0 , 3], [3, 'x', 'o', 2 , 'x', 2 , 'x', 3], [3, 'x', 'o', 2 , 'o', 'x', 0 , 3], [3, 'x', 'o', 0 , 'o', 0 , -1 , 3], [3, 'x', 'o', 0 , 'o', 0 , 'x', 3], [3, 'x', 0 , 0 , 0 , 0 , -1 , 3], [3, 'x', 0 , 1 , 1 , 0 , 'x', 3], [3, 'x', 0 , 0 , 0 , 'x', -2 , 3], [3, 'x', 0 , 0 , 0 , 'o', 0 , 3], [3, 'x', 0 , 0 , 'x', 'o', -2 , 3], [3, 'x', 0 , 0 , 'x', 0 , -1 , 3], [3, 'x', 0 , 0 , 'x', 2 , 'x', 3], [3, 'x', 0 , 2 , 'o', 'x', 1 , 3], [3, 'x', 0 , 0 , 'o', 0 , -1 , 3], [3, 'x', 2 , 0 , 'o', 0 , 'x', 3], [3, 'x', 2 , 'x', 'o', 'x', -2 , 3], [3, 'x', 0 , 'x', 'o', 1 , -1 , 3], [3, 'x', 0 , 'x', 'o', 2 , 'x', 3], [3, 'x', 2 , 'x', 0 , 0 , -1 , 3], [3, 'x', 2 , 'x', 1 , 'x', -2 , 3], [3, 'x', 2 , 'x', 0 , 'o', 0 , 3], [3, 'x', 2 , 'o', 'x', 'o', -2 , 3], [3, 'x', 2 , 'o', 'x', 0 , -1 , 3], [3, 'x', 0 , 'o', 0 , -1 , -1 , 3], [3, 'x', 0 , 'o', 0 , 'x', -2 , 3], [3, 'x', 2 , 'o', 0 , 'o', -1 , 3], [3, 0 , 0 , 0 , 0 , 0 , 0 , 3], [3, -1 , 0 , 0 , 0 , 'x', -2 , 3], [3, -1 , 0 , 0 , 0 , 'o', 0 , 3], [3, -1 , 0 , 0 , 'x', 'o', -2 , 3], [3, -1 , 0 , 0 , 'x', 0 , 0 , 3], [3, -1 , 0 , 0 , 'o', 'x', 0 , 3], [3, -1 , 0 , 0 , 'o', 0 , -1 , 3], [3, -1 , 0 , 'x', 'o', 'x', -2 , 3], [3, -1 , 0 , 'x', 'o', 0 , -1 , 3], [3, -1 , 0 , 'x', 1 , 'x', -2 , 3], [3, -1 , 0 , 'x', 0 , 'o', -1 , 3], [3, -1 , 0 , 'o', 'x', 'o', -2 , 3], [3, -1 , 0 , 'o', 0 , 'x', -2 , 3], [3, -1 , 0 , 'o', 0 , 'o', -1 , 3], [3, -2 , 'x', 'o', 'x', 'o', -2 , 3], [3, 0 , 'x', 'o', 0 , 'x', -2 , 3], [3, -1 , 'x', 'o', 0 , 'o', -1 , 3], [3, -2 , 'x', 0 , 0 , 'x', -2 , 3], [3, -2 , 'x', 0 , 0 , 'o', 0 , 3], [3, -2 , 'x', 0 , 'x', 'o', -2 , 3], [3, -2 , 'o', 'x', 0 , 'o', -1 , 3], [3, -1 , 'o', 0 , 0 , 'o', -1 , 3]]

class RawPattern(list):
 def __init__(self):
  self+=[['', 'o', ''], ['', 'x', ''], ['', 'o', 'x', ''], ['', 'o', '', ''], ['', 'x', '', ''], ['', 'o', 'x', 'o', ''], ['', 'o', 'x', '', ''], ['', 'o', '' , '', ''], ['', 'o', '', 'x', ''], ['', 'o', '', 'o', ''], ['', 'x', 'o', 'x', ''], ['', 'x', 'o', '', ''], ['', 'x', '' , '' , ''], ['', 'x', '', 'x', ''], ['', '', 'x', '', ''], ['', '' , 'o', '' , ''], ['', 'o', 'x', 'o', 'x', ''], ['', 'o', 'x', 'o', '', ''], ['', 'o', 'x', '', '', ''], ['', 'o', 'x', '' , 'x', ''], ['', 'o', 'x', '' , 'o', ''], ['', 'o', '' , '' , '' , ''], ['', 'o', '' , '' , 'x', ''], ['', 'o', '' , '' , 'o', ''], ['', 'o', '' , 'x', '' , ''], ['', 'o', '' , 'o', 'x', ''], ['', 'o', '' , 'o', '' , ''], ['', 'x', 'o', 'x', '' , ''], ['', 'x', 'o', '' , '' , ''], ['', 'x', 'o', '' , 'x', ''], ['', 'x', '' , '' , '' , ''], ['', 'x', '' , '' , 'x', ''], ['', 'x', '' , 'x', '' , ''], ['', 'x', '' , 'o', '' , ''], ['', '' , '' , 'x', '' , ''], ['', '' , '' , 'o', '' , ''], ['', '' , 'x', 'o', '' , ''], ['', 'o', 'x', 'o', 'x', 'o', ''], ['', 'o', 'x', 'o', 'x', '' , ''], ['', 'o', 'x', 'o', '' , '' , ''], ['', 'o', 'x', 'o', '' , 'x', ''], ['', 'o', 'x', 'o', '' , 'o', ''], ['', 'o', 'x', '' , '' , '' , ''], ['', 'o', 'x', '' , '' , 'x', ''], ['', 'o', 'x', '' , '' , 'o', ''], ['', 'o', 'x', '' , 'x', 'o', ''], ['', 'o', 'x', '' , 'x', '' , ''], ['', 'o', 'x', '' , 'o', 'x', ''], ['', 'o', 'x', '' , 'o', '' , ''], ['', 'o', '' , '' , '' , '' , ''], ['', 'o', '' , '' , '' , 'x', ''], ['', 'o', '' , '' , '' , 'o', ''], ['', 'o', '' , '' , 'x', '' , ''], ['', 'o', '' , '' , 'o', 'x', ''], ['', 'o', '' , '' , 'o', '' , ''], ['', 'o', '' , 'x', 'o', 'x', ''], ['', 'o', '' , 'x', 'o', '' , ''], ['', 'o', '' , 'x', '' , '' , ''], ['', 'o', '' , 'x', '' , 'x', ''], ['', 'o', '' , 'x', '' , 'o', ''], ['', 'o', '' , 'o', 'x', '' , ''], ['', 'o', '' , 'o', '' , '' , ''], ['', 'o', '' , 'o', '' , 'x', ''], ['', 'o', '' , 'o', '' , 'o', ''], ['', 'x', 'o', 'x', 'o', 'x', ''], ['', 'x', 'o', 'x', 'o', '' , ''], ['', 'x', 'o', 'x', '' , '' , ''], ['', 'x', 'o', 'x', '' , 'x', ''], ['', 'x', 'o', '' , '' , '' , ''], ['', 'x', 'o', '' , '' , 'x', ''], ['', 'x', 'o', '' , 'x', '' , ''], ['', 'x', 'o', '' , 'o', 'x', ''], ['', 'x', 'o', '' , 'o', '' , ''], ['', 'x', '' , '' , '' , '' , ''], ['', 'x', '' , '' , '' , 'x', ''], ['', 'x', '' , '' , 'x', '' , ''], ['', 'x', '' , '' , 'o', '' , ''], ['', 'x', '' , 'x', 'o', '' , ''], ['', 'x', '' , 'x', '' , '' , ''], ['', 'x', '' , 'x', '' , 'x', ''], ['', 'x', '' , 'o', 'x', '' , ''], ['', 'x', '' , 'o', '' , '' , ''], ['', 'x', '' , 'o', '' , 'x', ''], ['', '' , '' , '' , 'x', '' , ''], ['', '' , '' , '' , 'o', '' , ''], ['', '' , '' , 'x', 'o', '' , ''], ['', '' , '' , 'x', '' , '' , ''], ['', '' , '' , 'o', 'x', '' , ''], ['', '' , '' , 'o', '' , '' , ''], ['', '' , 'x', 'o', 'x', '' , ''], ['', '' , 'x', '' , 'x', '' , ''], ['', '' , 'x', '' , 'o', '' , ''], ['', '' , 'o', 'x', 'o', '' , ''], ['', '' , 'o', '' , 'o', '' , ''], ['', 'o', 'x', 'o', 'x', 'o', 'x', ''], ['', 'o', 'x', 'o', 'x', 'o', '' , ''], ['', 'o', 'x', 'o', 'x', '' , '' , ''], ['', 'o', 'x', 'o', 'x', '' , 'x', ''], ['', 'o', 'x', 'o', 'x', '' , 'o', ''], ['', 'o', 'x', 'o', '' , '' , '' , ''], ['', 'o', 'x', 'o', '' , '' , 'x', ''], ['', 'o', 'x', 'o', '' , '' , 'o', ''], ['', 'o', 'x', 'o', '' , 'x', 'o', ''], ['', 'o', 'x', 'o', '' , 'x', '' , ''], ['', 'o', 'x', 'o', '' , 'o', 'x', ''], ['', 'o', 'x', 'o', '' , 'o', '' , ''], ['', 'o', 'x', '' , '' , '' , '' , ''], ['', 'o', 'x', '' , '' , '' , 'x', ''], ['', 'o', 'x', '' , '' , '' , 'o', ''], ['', 'o', 'x', '' , '' , 'x', 'o', ''], ['', 'o', 'x', '' , '' , 'x', '' , ''], ['', 'o', 'x', '' , '' , 'o', 'x', ''], ['', 'o', 'x', '' , '' , 'o', '' , ''], ['', 'o', 'x', '' , 'x', 'o', 'x', ''], ['', 'o', 'x', '' , 'x', 'o', '' , ''], ['', 'o', 'x', '' , 'x', '' , '' , ''], ['', 'o', 'x', '' , 'x', '' , 'x', ''], ['', 'o', 'x', '' , 'x', '' , 'o', ''], ['', 'o', 'x', '' , 'o', 'x', '' , ''], ['', 'o', 'x', '' , 'o', '' , '' , ''], ['', 'o', 'x', '' , 'o', '' , 'x', ''], ['', 'o', 'x', '' , 'o', '' , 'o', ''], ['', 'o', '' , '' , '' , '' , '' , ''], ['', 'o', '' , '' , '' , '' , 'x', ''], ['', 'o', '' , '' , '' , '' , 'o', ''], ['', 'o', '' , '' , '' , 'x', '' , ''], ['', 'o', '' , '' , '' , 'o', 'x', ''], ['', 'o', '' , '' , '' , 'o', '' , ''], ['', 'o', '' , '' , 'x', 'o', 'x', ''], ['', 'o', '' , '' , 'x', 'o', '' , ''], ['', 'o', '' , '' , 'x', '' , '' , ''], ['', 'o', '' , '' , 'x', '' , 'x', ''], ['', 'o', '' , '' , 'x', '' , 'o', ''], ['', 'o', '' , '' , 'o', 'x', '' , ''], ['', 'o', '' , '' , 'o', '' , '' , ''], ['', 'o', '' , '' , 'o', '' , 'x', ''], ['', 'o', '' , '' , 'o', '' , 'o', ''], ['', 'o', '' , 'x', 'o', 'x', '' , ''], ['', 'o', '' , 'x', 'o', '' , '' , ''], ['', 'o', '' , 'x', 'o', '' , 'x', ''], ['', 'o', '' , 'x', 'o', '' , 'o', ''], ['', 'o', '' , 'x', '' , '' , '' , ''], ['', 'o', '' , 'x', '' , '' , 'x', ''], ['', 'o', '' , 'x', '' , 'x', '' , ''], ['', 'o', '' , 'x', '' , 'o', 'x', ''], ['', 'o', '' , 'x', '' , 'o', '' , ''], ['', 'o', '' , 'o', 'x', 'o', 'x', ''], ['', 'o', '' , 'o', 'x', 'o', '' , ''], ['', 'o', '' , 'o', 'x', '' , '' , ''], ['', 'o', '' , 'o', 'x', '' , 'x', ''], ['', 'o', '' , 'o', '' , '' , '' , ''], ['', 'o', '' , 'o', '' , '' , 'x', ''], ['', 'o', '' , 'o', '' , 'x', '' , ''], ['', 'o', '' , 'o', '' , 'o', 'x', ''], ['', 'o', '' , 'o', '' , 'o', '' , ''], ['', 'x', 'o', 'x', 'o', 'x', '' , ''], ['', 'x', 'o', 'x', 'o', '' , '' , ''], ['', 'x', 'o', 'x', 'o', '' , 'x', ''], ['', 'x', 'o', 'x', '' , '' , '' , ''], ['', 'x', 'o', 'x', '' , '' , 'x', ''], ['', 'x', 'o', 'x', '' , 'x', '' , ''], ['', 'x', 'o', 'x', '' , 'o', 'x', ''], ['', 'x', 'o', 'x', '' , 'o', '' , ''], ['', 'x', 'o', '' , '' , '' , '' , ''], ['', 'x', 'o', '' , '' , '' , 'x', ''], ['', 'x', 'o', '' , '' , 'x', '' , ''], ['', 'x', 'o', '' , '' , 'o', 'x', ''], ['', 'x', 'o', '' , '' , 'o', '' , ''], ['', 'x', 'o', '' , 'x', 'o', '' , ''], ['', 'x', 'o', '' , 'x', '' , '' , ''], ['', 'x', 'o', '' , 'x', '' , 'x', ''], ['', 'x', 'o', '' , 'o', 'x', '' , ''], ['', 'x', 'o', '' , 'o', '' , '' , ''], ['', 'x', 'o', '' , 'o', '' , 'x', ''], ['', 'x', '' , '' , '' , '' , '' , ''], ['', 'x', '' , '' , '' , '' , 'x', ''], ['', 'x', '' , '' , '' , 'x', '' , ''], ['', 'x', '' , '' , '' , 'o', '' , ''], ['', 'x', '' , '' , 'x', 'o', '' , ''], ['', 'x', '' , '' , 'x', '' , '' , ''], ['', 'x', '' , '' , 'x', '' , 'x', ''], ['', 'x', '' , '' , 'o', 'x', '' , ''], ['', 'x', '' , '' , 'o', '' , '' , ''], ['', 'x', '' , '' , 'o', '' , 'x', ''], ['', 'x', '' , 'x', 'o', 'x', '' , ''], ['', 'x', '' , 'x', 'o', '' , '' , ''], ['', 'x', '' , 'x', 'o', '' , 'x', ''], ['', 'x', '' , 'x', '' , '' , '' , ''], ['', 'x', '' , 'x', '' , 'x', '' , ''], ['', 'x', '' , 'x', '' , 'o', '' , ''], ['', 'x', '' , 'o', 'x', 'o', '' , ''], ['', 'x', '' , 'o', 'x', '' , '' , ''], ['', 'x', '' , 'o', '' , '' , '' , ''], ['', 'x', '' , 'o', '' , 'x', '' , ''], ['', 'x', '' , 'o', '' , 'o', '' , ''], ['', '' , '' , '' , '' , '' , '' , ''], ['', '' , '' , '' , '' , 'x', '' , ''], ['', '' , '' , '' , '' , 'o', '' , ''], ['', '' , '' , '' , 'x', 'o', '' , ''], ['', '' , '' , '' , 'x', '' , '' , ''], ['', '' , '' , '' , 'o', 'x', '' , ''], ['', '' , '' , '' , 'o', '' , '' , ''], ['', '' , '' , 'x', 'o', 'x', '' , ''], ['', '' , '' , 'x', 'o', '' , '' , ''], ['', '' , '' , 'x', '' , 'x', '' , ''], ['', '' , '' , 'x', '' , 'o', '' , ''], ['', '' , '' , 'o', 'x', 'o', '' , ''], ['', '' , '' , 'o', '' , 'x', '' , ''], ['', '' , '' , 'o', '' , 'o', '' , ''], ['', '' , 'x', 'o', 'x', 'o', '' , ''], ['', '' , 'x', 'o', '' , 'x', '' , ''], ['', '' , 'x', 'o', '' , 'o', '' , ''], ['', '' , 'x', '' , '' , 'x', '' , ''], ['', '' , 'x', '' , '' , 'o', '' , ''], ['', '' , 'x', '' , 'x', 'o', '' , ''], ['', '' , 'o', 'x', '' , 'o', '' , ''], ['', '' , 'o', '' , '' , 'o', '' , '']]

class DiagPatternsAuthorized(list):
 def __init__(self):
  self+=[['', '', 'x', 'o'],['', '', 'x', 'o', ''],['', '', 'x', 'o', '', ''],['', '', 'x', 'o', '', '', ''],['', '', 'o'],['', '', 'o', ''],['', '', 'o', '', ''],['', '', 'o', '', '', '']]
